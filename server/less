package json // import "encoding/json"

Package json implements encoding and decoding of JSON as defined in RFC 7159.
The mapping between JSON and Go values is described in the documentation for the
Marshal and Unmarshal functions.

See "JSON and Go" for an introduction to this package:
https://golang.org/doc/articles/json_and_go.html

# Security Considerations

The JSON standard (RFC 7159) is lax in its definition of a number of parser
behaviors. As such, many JSON parsers behave differently in various scenarios.
These differences in parsers mean that systems that use multiple independent
JSON parser implementations may parse the same JSON object in differing ways.

Systems that rely on a JSON object being parsed consistently for security
purposes should be careful to understand the behaviors of this parser, as well
as how these behaviors may cause interoperability issues with other parser
implementations.

Due to the Go Backwards Compatibility promise (https://go.dev/doc/go1compat)
there are a number of behaviors this package exhibits that may cause
interopability issues, but cannot be changed. In particular the following
parsing behaviors may cause issues:

  - If a JSON object contains duplicate keys, keys are processed in the order
    they are observed, meaning later values will replace or be merged into prior
    values, depending on the field type (in particular maps and structs will
    have values merged, while other types have values replaced).
  - When parsing a JSON object into a Go struct, keys are considered in a
    case-insensitive fashion.
  - When parsing a JSON object into a Go struct, unknown keys in the JSON object
    are ignored (unless a Decoder is used and Decoder.DisallowUnknownFields has
    been called).
  - Invalid UTF-8 bytes in JSON strings are replaced by the Unicode replacement
    character.
  - Large JSON number integers will lose precision when unmarshaled into
    floating-point types.

func Compact(dst *bytes.Buffer, src []byte) error
func HTMLEscape(dst *bytes.Buffer, src []byte)
func Indent(dst *bytes.Buffer, src []byte, prefix, indent string) error
func Marshal(v any) ([]byte, error)
func MarshalIndent(v any, prefix, indent string) ([]byte, error)
func Unmarshal(data []byte, v any) error
func Valid(data []byte) bool
type Decoder struct{ ... }
    func NewDecoder(r io.Reader) *Decoder
type Delim rune
type Encoder struct{ ... }
    func NewEncoder(w io.Writer) *Encoder
type InvalidUTF8Error struct{ ... }
type InvalidUnmarshalError struct{ ... }
type Marshaler interface{ ... }
type MarshalerError struct{ ... }
type Number string
type RawMessage []byte
type SyntaxError struct{ ... }
type Token any
type UnmarshalFieldError struct{ ... }
type UnmarshalTypeError struct{ ... }
type Unmarshaler interface{ ... }
type UnsupportedTypeError struct{ ... }
type UnsupportedValueError struct{ ... }
